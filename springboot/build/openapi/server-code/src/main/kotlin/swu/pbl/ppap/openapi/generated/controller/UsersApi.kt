/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package swu.pbl.ppap.openapi.generated.controller

import swu.pbl.ppap.openapi.generated.model.AskQuestion401Response
import swu.pbl.ppap.openapi.generated.model.CreateUser400Response
import swu.pbl.ppap.openapi.generated.model.LogoutUser200Response
import swu.pbl.ppap.openapi.generated.model.LogoutUser401Response
import swu.pbl.ppap.openapi.generated.model.LogoutUser500Response
import swu.pbl.ppap.openapi.generated.model.User
import swu.pbl.ppap.openapi.generated.model.UserToken
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import javax.validation.Valid
import javax.validation.constraints.DecimalMax
import javax.validation.constraints.DecimalMin
import javax.validation.constraints.Email
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface UsersApi {

    @Operation(
        summary = "사용자 가입",
        operationId = "createUser",
        description = "새로운 사용자를 가입합니다.",
        responses = [
            ApiResponse(responseCode = "200", description = "가입 성공", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "400", description = "가입 실패", content = [Content(schema = Schema(implementation = CreateUser400Response::class))])
        ],
        security = [ SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/users/signup"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun createUser(@Parameter(description = "", required = true) @Valid @RequestBody user: User): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "사용자 탈퇴",
        operationId = "deleteUser",
        description = "사용자 계정을 탈퇴 처리하고 isWithdrawed 상태를 true로 변경합니다.",
        responses = [
            ApiResponse(responseCode = "200", description = "탈퇴 성공", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "400", description = "탈퇴 실패", content = [Content(schema = Schema(implementation = CreateUser400Response::class))]),
            ApiResponse(responseCode = "401", description = "인증되지 않음 - 액세스 토큰이 없거나 유효하지 않음", content = [Content(schema = Schema(implementation = LogoutUser401Response::class))])
        ],
        security = [ SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/api/users/info"],
            produces = ["application/json"]
    )
    fun deleteUser(): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "사용자 상세 조회",
        operationId = "getUserInfo",
        description = "마이페이지에서 내 정보 조회하기",
        responses = [
            ApiResponse(responseCode = "200", description = "조회 성공", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "400", description = "조회 실패", content = [Content(schema = Schema(implementation = CreateUser400Response::class))]),
            ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = [Content(schema = Schema(implementation = AskQuestion401Response::class))])
        ],
        security = [ SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/users/info"],
            produces = ["application/json"]
    )
    fun getUserInfo(): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "사용자 로그아웃",
        operationId = "logoutUser",
        description = "사용자의 세션을 종료하고 토큰을 무효화합니다.",
        responses = [
            ApiResponse(responseCode = "200", description = "로그아웃 성공", content = [Content(schema = Schema(implementation = LogoutUser200Response::class))]),
            ApiResponse(responseCode = "401", description = "인증되지 않음", content = [Content(schema = Schema(implementation = LogoutUser401Response::class))]),
            ApiResponse(responseCode = "500", description = "서버 오류로 인해 로그아웃 실패", content = [Content(schema = Schema(implementation = LogoutUser500Response::class))])
        ],
        security = [ SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/users/logout"],
            produces = ["application/json"]
    )
    fun logoutUser(): ResponseEntity<LogoutUser200Response> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "사용자 정보 변경",
        operationId = "updateUserInfo",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "수정 성공", content = [Content(schema = Schema(implementation = User::class))]),
            ApiResponse(responseCode = "400", description = "수정 실패", content = [Content(schema = Schema(implementation = CreateUser400Response::class))]),
            ApiResponse(responseCode = "401", description = "Access token is missing or invalid", content = [Content(schema = Schema(implementation = AskQuestion401Response::class))])
        ],
        security = [ SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/api/users/info"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun updateUserInfo(@Parameter(description = "", required = true) @Valid @RequestBody user: User): ResponseEntity<User> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "사용자 로그인",
        operationId = "userLogin",
        description = "사용자 로그인 처리",
        responses = [
            ApiResponse(responseCode = "200", description = "로그인 성공", content = [Content(schema = Schema(implementation = UserToken::class))]),
            ApiResponse(responseCode = "400", description = "로그인 실패", content = [Content(schema = Schema(implementation = CreateUser400Response::class))])
        ],
        security = [ SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/users/login"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun userLogin(@Parameter(description = "", required = true) @Valid @RequestBody user: User): ResponseEntity<UserToken> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
